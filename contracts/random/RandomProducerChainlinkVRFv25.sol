// SPDX-License-Identifier: MIT
// An example of a consumer contract that directly pays for each request.
pragma solidity 0.8.24;

import {IRandomProducer} from "./interfaces/IRandomProducer.sol";
import {IAccessManager} from "@openzeppelin/contracts/access/manager/IAccessManager.sol";
import {AccessManaged} from "@openzeppelin/contracts/access/manager/AccessManaged.sol";
import {LinkTokenInterface} from "@chainlink/contracts/src/v0.8/shared/interfaces/LinkTokenInterface.sol";
import {VRFConsumerBaseV2Plus} from "@chainlink/contracts/src/v0.8/vrf/dev/VRFConsumerBaseV2Plus.sol";
import {VRFV2PlusClient} from "@chainlink/contracts/src/v0.8/vrf/dev/libraries/VRFV2PlusClient.sol";

/**
 * @title RandomProducerChainlinkVRFv25
 * @notice A contract that produce random words through the Chainlink VRF service via subscription.
 * @custom:security-contact dev@deelit.net
 */
contract RandomProducerChainlinkVRFv25 is IRandomProducer, VRFConsumerBaseV2Plus, AccessManaged {
    event RequestSent(uint256 requestId);
    event RequestFulfilled(uint256 requestId, uint256 randomWords);
    event CallbackGasLimitChanged(uint32 callbackGasLimit);
    event RequestConfirmationsChanged(uint16 requestConfirmations);
    event NativePaymentChanged(bool enableNativePayment);
    event SubscriptionIdChanged(uint256 subscriptionId);
    event GasLanekeyHashChanged(bytes32 gasLanekeyHash);

    uint32 constant NUM_WORDS = 1;

    struct RequestStatus {
        bool fulfilled; // whether the request has been successfully fulfilled
        bool exists; // whether a requestId exists
        uint256 randomWord; // the random words generated by the request
    }
    mapping(uint256 => RequestStatus) public _requests; /* requestId --> requestStatus */

    // The chainlink VRF subscription id.
    uint256 public _subscriptionId;

    // past requests Id.
    uint256[] public _requestIds;
    uint256 public _lastRequestId;

    // The gas lane to use, which specifies the maximum gas price to bump to.
    // For a list of available gas lanes on each network,
    // see https://docs.chain.link/docs/vrf/v2-5/supported-networks
    bytes32 public _gasLanekeyHash;

    // Depends on the number of requested values that you want sent to the
    // fulfillRandomWords() function. Storing each word costs about 20,000 gas,
    // so 100,000 is a safe default for this example contract. Test and adjust
    // this limit based on the network that you select, the size of the request,
    // and the processing of the callback request in the fulfillRandomWords()
    // function.
    uint32 public _callbackGasLimit;

    // request confirmations required for the request.
    uint16 public _requestConfirmations;

    // whether to use native payment or not.
    bool useNativePayment = false;

    constructor(
        IAccessManager manager_,
        address coordinator_,
        uint256 subscriptionId_,
        bytes32 gasLanekeyHash_,
        uint32 callbackGasLimit_,
        uint16 requestConfirmations_
    ) AccessManaged(address(manager_)) VRFConsumerBaseV2Plus(coordinator_) {
        _subscriptionId = subscriptionId_;
        _gasLanekeyHash = gasLanekeyHash_;
        _callbackGasLimit = callbackGasLimit_;
        _requestConfirmations = requestConfirmations_;
    }

    /// @dev Set the callback gas limit.
    /// @param callbackGasLimit The callback gas limit.
    function setCallbackGasLimit(uint32 callbackGasLimit) external restricted {
        require(callbackGasLimit > 0, "RandomProducerChainlinkVRFv25: invalid callback gas limit");
        _callbackGasLimit = callbackGasLimit;
        emit CallbackGasLimitChanged(callbackGasLimit);
    }

    /// @dev Set the request confirmations.
    /// @param requestConfirmations The request confirmations.
    function setRequestConfirmations(uint16 requestConfirmations) external restricted {
        _requestConfirmations = requestConfirmations;
        emit RequestConfirmationsChanged(requestConfirmations);
    }

    /// @dev Set whether to use native payment or not.
    /// @param enableNativePayment Whether to use native payment or not.
    function setNativePayment(bool enableNativePayment) external restricted {
        useNativePayment = enableNativePayment;
        emit NativePaymentChanged(enableNativePayment);
    }

    /// @dev Set the subscription id.
    /// @param subscriptionId The subscription id.
    function setSubscriptionId(uint256 subscriptionId) external restricted {
        _subscriptionId = subscriptionId;
        emit SubscriptionIdChanged(subscriptionId);
    }

    /// @dev Set the gas lane key hash.
    /// @param gasLanekeyHash The gas lane key hash.
    function setGasLanekeyHash(bytes32 gasLanekeyHash) external restricted {
        _gasLanekeyHash = gasLanekeyHash;
        emit GasLanekeyHashChanged(gasLanekeyHash);
    }

    /// @dev Request a random word.
    /// @return requestId The request id.
    function requestRandomWord() external restricted returns (uint256 requestId) {
        // Will revert if subscription is not set and funded.
        requestId = s_vrfCoordinator.requestRandomWords(
            VRFV2PlusClient.RandomWordsRequest({
                keyHash: _gasLanekeyHash,
                subId: _subscriptionId,
                requestConfirmations: _requestConfirmations,
                callbackGasLimit: _callbackGasLimit,
                numWords: NUM_WORDS,
                extraArgs: VRFV2PlusClient._argsToBytes(VRFV2PlusClient.ExtraArgsV1({nativePayment: useNativePayment}))
            })
        );
        _requests[requestId] = RequestStatus({randomWord: 0, exists: true, fulfilled: false});
        _requestIds.push(requestId);
        _lastRequestId = requestId;
        emit RequestSent(requestId);
        return requestId;
    }

    /// @dev Callback function used by VRF coordinator.
    /// @param _requestId The request id.
    function fulfillRandomWords(uint256 _requestId, uint256[] calldata _randomWords) internal override {
        require(_requests[_requestId].exists, "RandomProducerChainlinkVRFv25: request not found");
        _requests[_requestId].fulfilled = true;
        _requests[_requestId].randomWord = _randomWords[0];
        emit RequestFulfilled(_requestId, _randomWords[0]);
    }

    /// @dev Get a request status.
    /// @param _requestId The request id.
    function getRequestStatus(uint256 _requestId) external view returns (bool fulfilled, uint256 randomWord) {
        require(_requests[_requestId].exists, "RandomProducerChainlinkVRFv25: request not found");
        RequestStatus memory request = _requests[_requestId];
        return (request.fulfilled, request.randomWord);
    }
}
